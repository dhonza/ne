#INCLUDE = fc/fc55.properties
#LEAVE THE FIRST LINE EMPTY
EXPERIMENTS = 50

#INCLUDE = fc/fc55.properties
INCLUDE = reco/rcR.properties
#INCLUDE = bool/xor.properties
#INCLUDE = robots/robots_max_speed.properties
#INCLUDE = octopus/octopus.properties
#INCLUDE = ale/ale.properties

PARALLEL = true
#PARALLEL = false
PARALLEL.FORCE_THREADS = 4

SOLVER = "GP"

#GP.TYPE = "gp.GP"
#GP.TYPE = "gp.GPCrowding"
GP.TYPE = "gp.GPEFS"
#GP.FUNCTIONS = "Add; Multiply; Sin; Atan; SqrtAbs; Abs; Gauss; GaussDiff"
#GP.FUNCTIONS = "Add; Multiply"
GP.FUNCTIONS = "Add; Multiply; Sin; Atan; Gauss"

GP.MAX_EVALUATIONS = 100000

#GP.MAX_DEPTH = 4
GP.MAX_DEPTH = 5

#GP.FULL_INIT = true

#GP.MUTATION_SUBTREE_PROBABLITY = 1.0
#GP.MUTATION_CAUCHY_PROBABILITY = 0.8
#GP.MUTATION_CAUCHY_POWER = 0.01

#old setup
GP.MUTATION_CAUCHY_PROBABILITY = 0.1
GP.MUTATION_CAUCHY_POWER = 0.01
GP.MUTATION_SUBTREE_PROBABLITY = 0.8

#GP.DISTANCE = "BASIC"
#GP.DISTANCE = "RANDOM"
#GP.DISTANCE = "RESTO2"
#GP.DISTANCE = "TREEP"
#GP.DISTANCE = "TREEP2"
GP.DISTANCE = "GENERAL"
#GP.DISTANCE = "NODES"
#GP.DISTANCE = "ISO"
#GP.DISTANCE = "PHENO"

#GP.DISTANCE = "BASIC","RANDOM","NODES","ISO","PHENO"

#GP.DISTANCE_TREEP_C1 = 0.9
#GP.DISTANCE_TREEP_C2 = 0.8

#GP.DISTANCE_GENERAL_C = 0.0,1.0
GP.DISTANCE_GENERAL_C = 0.0
GP.DISTANCE_GENERAL_K = 1.0
GP.DISTANCE_GENERAL_NOT_MATCHING_NODE_EXIT = false
#GP.DISTANCE_GENERAL_NOT_MATCHING_NODE_EXIT = false,true
GP.DISTANCE_GENERAL_DESCEND_NULL_TREES = true
#GP.DISTANCE_GENERAL_DESCEND_NULL_TREES = false,true

GPEFS.DISTANCE_DELTA = 2.0
GPEFS.SPECIES_COUNT_MEAN = 5.0
#GPEFS.SPECIES_COUNT_MEAN = 5.0,10.0,20.0
GPEFS.SPECIES_COUNT_RANGE = 0.0
GPEFS.ELITIST_PROPORTION_SIZE = 0.2
GPEFS.SPECIES_REPRODUCTION_RATIO = 0.4
#GPEFS.SPECIES_REPRODUCTION_RATIO = 0.05,0.1,0.2,0.4
#GPEFS.SPECIES_REPRODUCTION_RATIO = 0.6,0.8,1.0
#BASIC
#GPEFS.SPECIES_REPRODUCTION_RATIO = 0.05

GPEFS.SPECIES_ASSIGN = "original"
#GPEFS.SPECIES_ASSIGN = "kmedoids"
#-----------------------------------------

#BUILDER = "precompiled"
#BUILDER = "basic"
#BUILDER = "cascade"

#WEIGHT_EVALUATOR = "basic"
WEIGHT_EVALUATOR = "original"
#WEIGHT_EVALUATOR = "biased"
#WEIGHT_EVALUATOR = "biased", "original"

#determines what type of distance is used for niching algorithms (NEAT, GPCrowding, ...)
#DISTANCE = "phenotype"
DISTANCE = "genotype"

#compute and store full genotype distance matrix
GENOTYPE_DIVERSITY = false
#GENOTYPE_DIVERSITY = true
#GENOTYPE_DISTANCE_MATRIX = true
GENOTYPE_DISTANCE_MATRIX = false
#GENOTYPE_DISTANCE_PROJECTION = true
GENOTYPE_DISTANCE_PROJECTION = false
WRITE_SPECIES = true
#WRITE_SPECIES = false

#compute and store full phenotype distance matrix
PHENOTYPE_DIVERSITY = false

#STORE_GENOTYPES_MATHEMATICA = true
STORE_GENOTYPES_MATHEMATICA = false

# show info for each generation
PRINT.generation = true
# show info when a new campion is found
PRINT.progress = true
#show CPPN
PRINT.progressShowCPPN = true
#show evaluated champion (final network)
PRINT.progressShowHyperNet = false
# show evaluated champion (visualization)
PRINT.progressShowProblem = true
# show champion after EA stops
PRINT.finished = true
# show evaluated champion after EA stops (final network)
PRINT.finishedShowHyperNet = false
# show evaluated champion after EA stops (visualization)
PRINT.finishedShowProblem = true

# store statistics for the each generation
PRINT.storeRun = true
