(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Needs["PlotLegends`"]


readRunFitness[name_]:=
Module[{allData,noHeaderData,data},
allData = ImportString[Import[name],"TSV"];
noHeaderData = Rest[allData];
data = noHeaderData[[All,2;;]];
{data,noHeaderData[[All,1]], Mean[Transpose[data]], Median[Transpose[data]], Min/@data}
]


readRunEvaluationInfo[name_]:=
Module[{allData,noHeaderData,data},
allData = ImportString[Import[name],"TSV"];
data = Rest[allData];
{data,Max/@data, Mean[Transpose[data]], Median[Transpose[data]], Min/@data}
]


enlarge[list_, fill_, stat_]:=list~Join~Array[fill&,Max[Length/@stat]-Length[list]]


enlarge[list_, fill_, stat_, len_]:=list~Join~Array[fill&,len-Length[list]]


readFinalStats[names_List,statName_]:=
Module[{allData},
allData = ImportString[Import[#],"TSV"]&/@names;
allData[[#[[1]],2;;,#[[3]]]]&/@Position[allData,statName]
]


readFinalStatNames[names_List]:=
Module[{allData},
Flatten[Intersection[(ImportString[Import[#],"TSV"]&/@names)[[All,1,All]]]]
]


listAllExperimentFiles[dirs_List]:=
Flatten[FileNames[RegularExpression["experiments\\_\\d\\d\\d\\.txt"],{"/Users/drchaj1/java/exp/"<>#}]&/@dirs]


listAllParameterFiles[dirs_List]:=
Flatten[FileNames[RegularExpression["parameters\\_\\d\\d\\d\\.txt"],{"/Users/drchaj1/java/exp/"<>#}]&/@dirs]


finalStatsAll[listOfFiles_,methodNames_,sortBy_:Null,numOfConfs_:1]:=
Module[{files,methods,statNames,statPosition,data,order,labels,labelPlacement,success,colors},
(* Permutate files and labels *)
files=Flatten[Transpose[Partition[listOfFiles,Length[listOfFiles]/numOfConfs]]];
methods=Flatten[Transpose[Partition[methodNames,Length[methodNames]/numOfConfs]]];

(* Names of all stats. *)
statNames=readFinalStatNames[files];
(* A position of a stat to sort by. *)
statPosition=Flatten[Position[statNames,sortBy]];
data=readFinalStats[files,#]&/@statNames;
(* Now sort-by stat given or not existing one given. *)
If[Length[statPosition]==1,
order=Ordering[Median/@data[[statPosition[[1]]]]],
order=Range[Length[files]]
];
(* Sort data and labels. *)
data=Part[#,order]&/@data;
labels =methods[[order]];

(* Compute % of sucessful runs *) 
success=N[100*Count[#,"true"]/Length[#]&/@data[[Sequence@@Flatten[Position[statNames,"SUCCESS"]]]]];

(* Prepare colors *)
If[numOfConfs==1,
colors="Rainbow",
colors=Take[ColorData[10,"ColorList"],numOfConfs]
(*colors=Take[{LightRed,LightGreen,LightBlue,LightOrange,LightBrown,LightCyan,LightMagenta},numOfConfs]*)
];

(* Print them as a table. *)
Print[Grid[Transpose@{{Style["ID",Bold]}~Join~labels,{Style["SUCCESS %",Bold]}~Join~success,{Style["DIR",Bold]}~Join~(StringReplace[#,"/Users/drchaj1/java/exp/"->""]&/@files)},Frame->All]];
(* And a bar chart. *)
labelPlacement=Placed[Style[#,FontSize->15]&/@labels,Axis,Rotate[#,Pi/2]&];
Print[BarChart[success,ChartLabels->labelPlacement,ChartStyle->colors,LabelingFunction->Center,ImageSize->1200]];
(* All other stats as box plots.*)
Grid[Transpose[{statNames,
BoxWhiskerChart[#,"Notched",ChartLabels->labelPlacement,ChartStyle->colors,ImageSize->1200]&
/@data
}]]
]



